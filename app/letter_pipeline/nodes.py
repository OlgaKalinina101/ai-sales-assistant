
import os
import time
from typing import Dict

import psutil
from sentence_transformers import SentenceTransformer

from app.helpers import extract_json
from app.letter_pipeline.openai_client import client
from app.letter_pipeline.types import LetterState
from app.retrieval import find_relevant_chunks_by_segment
from data_ingestion.config import CHROMA_COLLECTION_NAME, EMBEDDING_MODEL_NAME
from utils.chroma_client import get_chroma_client
from utils.logger import setup_logger

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = setup_logger("letter_pipeline")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ ChromaDB –∏ –º–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
chroma_client = get_chroma_client()
chroma_collection = chroma_client.get_or_create_collection(CHROMA_COLLECTION_NAME)
embedder = SentenceTransformer(EMBEDDING_MODEL_NAME)
openai_client = client
PROMPT_PATH = os.path.join(os.path.dirname(__file__), "prompt_template.txt")

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–∑–ª–æ–≤ –∫–æ–Ω–≤–µ–π–µ—Ä–∞
async def input_node(state: LetterState) -> LetterState:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.

    Args:
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω–≤–µ–π–µ—Ä–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏.

    Returns:
        –¢–æ –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
    """
    # –í–æ–∑–≤—Ä–∞—Ç –≤—Ö–æ–¥–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    return state


async def search_chunks_node(state: LetterState) -> LetterState:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤ –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É.

    Args:
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω–≤–µ–π–µ—Ä–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏.

    Returns:
        –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º —á–∞–Ω–∫–æ–≤.
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å–µ–≥–º–µ–Ω—Ç–∞
    if not isinstance(state.get("user_input"), Dict) or not state["user_input"].get("—Å–µ–≥–º–µ–Ω—Ç"):
        logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –∫–ª—é—á '—Å–µ–≥–º–µ–Ω—Ç' –≤ user_input.")
        return {**state, "chunks": []}

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞ –∏ –ø–æ–∏—Å–∫ —á–∞–Ω–∫–æ–≤
    segment = state["user_input"]["—Å–µ–≥–º–µ–Ω—Ç"]
    chunks = find_relevant_chunks_by_segment(segment, chroma_collection, embedder)

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
    logger.info(
        f"–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞ —á–∞–Ω–∫–æ–≤: "
        f"{psutil.Process().memory_info().rss / 1024**2:.2f} –ú–ë"
    )

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ —á–∞–Ω–∫–∞–º–∏
    return {**state, "chunks": chunks}

def load_prompt_template() -> str:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏"""
    with open(PROMPT_PATH, "r", encoding="utf-8") as f:
        return f.read()

async def build_prompt_node(state: LetterState) -> LetterState:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∏—Å—å–º–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —á–∞–Ω–∫–æ–≤.

    Args:
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω–≤–µ–π–µ—Ä–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ —á–∞–Ω–∫–∞–º–∏.

    Returns:
        –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º.
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not isinstance(state.get("user_input"), Dict) or not state.get("chunks"):
        logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ: user_input –∏–ª–∏ chunks.")
        return {**state, "prompt": ""}

    user_input = state["user_input"]
    chunks = state["chunks"]

    required_keys = ["–∫–æ–Ω—Ç–∞–∫—Ç", "–¥–æ–ª–∂–Ω–æ—Å—Ç—å", "–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–æ–º–ø–∞–Ω–∏–∏", "—Å–µ–≥–º–µ–Ω—Ç"]
    missing_keys = [key for key in required_keys if key not in user_input]
    if missing_keys:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–∏ –≤ user_input: {missing_keys}")
        return {**state, "prompt": ""}

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ —á–∞–Ω–∫–æ–≤ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ 5)
    context = "\n\n".join(chunks[:5])

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –ø–∏—Å—å–º–∞
    print("template keys:", user_input.keys())
    template = load_prompt_template()

    try:
        prompt = template.format(**user_input, context=context)
    except KeyError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á {e}")
        return {**state, "prompt": ""}

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –ø—Ä–æ–º–ø—Ç–æ–º
    return {**state, "prompt": prompt}


async def generate_letter_node(state: LetterState) -> LetterState:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ–ª–æ–≤–æ–µ –ø–∏—Å—å–º–æ —Å –ø–æ–º–æ—â—å—é OpenAI API –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–º–ø—Ç–∞.

    Args:
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω–≤–µ–π–µ—Ä–∞ —Å –ø—Ä–æ–º–ø—Ç–æ–º.

    Returns:
        –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–∏—Å—å–º–æ–º.
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ–º–ø—Ç–∞
    if not state.get("prompt"):
        logger.error("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∏—Å—å–º–∞.")
        return {**state, "letter": ""}

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–∏—Å—å–º–∞ —á–µ—Ä–µ–∑ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π OpenAI API
    try:
        start_time = time.perf_counter()

        logger.info("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenAI API")
        response = await openai_client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {
                    "role": "system",
                    "content": "–¢—ã ‚Äî AI-–ø–æ–º–æ—â–Ω–∏–∫, –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∏–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤.",
                },
                {"role": "user", "content": state["prompt"]},
            ],
            temperature=0.7,
        )
        letter_raw = response.choices[0].message.content
        elapsed = time.perf_counter() - start_time

        # –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        logger.info(f"üì® –ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∑–∞ {elapsed:.2f} —Å–µ–∫—É–Ω–¥.")

        try:
            letter_json = extract_json(letter_raw)
            print(letter_json)
            subject = letter_json.get("subject", "")
            print(subject)
            body = letter_json.get("body", "")
            print(body)
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON-–æ—Ç–≤–µ—Ç–∞: {e}")
            subject = ""
            body = letter_raw  # fallback

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
        logger.info(
            f"–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∏—Å—å–º–∞: "
            f"{psutil.Process().memory_info().rss / 1024**2:.2f} –ú–ë"
        )

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–∏—Å—å–º–æ–º
        return {**state, "subject": subject, "letter": body}

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∏—Å—å–º–∞: {e}")
        return {**state, "subject": "", "letter": ""}


async def output_node(state: LetterState) -> LetterState:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–∏—Å—å–º–æ–º.

    Args:
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω–≤–µ–π–µ—Ä–∞ —Å –ø–∏—Å—å–º–æ–º.

    Returns:
        –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å –ø–∏—Å—å–º–æ–º (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å LangGraph).
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–µ–º—ã
    if not state.get("subject"):
        logger.warning("–¢–µ–º–∞ –ø–∏—Å—å–º–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏.")
        return {**state, "subject": "", "letter": ""}

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–∏—Å—å–º–∞
    if not state.get("letter"):
        logger.warning("–ü–∏—Å—å–º–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏.")
        return {**state, "subject": "", "letter": ""}

    # –í–æ–∑–≤—Ä–∞—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å LangGraph
    return state
import os
import warnings
from typing import List

from chromadb.api.models import Collection
from sentence_transformers import SentenceTransformer

from data_ingestion.config import RAW_DATA_DIR, PROCESSED_DATA_DIR, CHROMA_COLLECTION_NAME, ZIP_PATH
from data_ingestion.extractor import extract_nested_zip
from data_ingestion.ingestor import KnowledgeBaseBuilder
from utils.chroma_client import get_chroma_client
from utils.logger import setup_logger

# –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è torch
warnings.filterwarnings(
    "ignore",
    category=FutureWarning,
    message="`encoder_attention_mask` is deprecated",
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = setup_logger("chunks")

def find_relevant_chunks_by_segment(
    segment: str,
    collection: Collection,
    embedder: SentenceTransformer,
    top_k: int = 5,
) -> List[str]:
    """
    –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é —Å–µ–≥–º–µ–Ω—Ç–∞.

    Args:
        segment: –°–µ–≥–º–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ").
        collection: –ö–æ–ª–ª–µ–∫—Ü–∏—è ChromaDB.
        embedder: –ú–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ (SentenceTransformer).
        top_k: –°–∫–æ–ª—å–∫–æ —Å–∞–º—ã—Ö –ø–æ—Ö–æ–∂–∏—Ö —á–∞–Ω–∫–æ–≤ –≤–µ—Ä–Ω—É—Ç—å.

    Returns:
        –°–ø–∏—Å–æ–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤.
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not segment.strip():
        logger.warning("–ü—É—Å—Ç–æ–π —Å–µ–≥–º–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.")
        return []
    if top_k <= 0:
        logger.warning(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ top_k ({top_k}), –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.")
        return []

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –∫–æ–ª–ª–µ–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –ø—É—Å—Ç–∞
        if collection.count() == 0:
            logger.warning("üîÑ –ö–æ–ª–ª–µ–∫—Ü–∏—è Chroma –ø—É—Å—Ç–∞. –ó–∞–ø—É—Å–∫–∞—é –ø–µ—Ä–µ—Å–±–æ—Ä–∫—É –±–∞–∑—ã...")

            # –®–∞–≥ 1: –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞
            if os.path.exists(RAW_DATA_DIR):
                print("–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å–ø–∞–∫–æ–≤–∫—É –∞—Ä—Ö–∏–≤–∞")
                try:
                    extract_nested_zip(ZIP_PATH, PROCESSED_DATA_DIR)
                except Exception as e:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å –∞—Ä—Ö–∏–≤ {e}")
                logger.info("üì¶ –ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω.")
            else:
                logger.error(f"‚ùå –ê—Ä—Ö–∏–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {RAW_DATA_DIR}")
                return []

            # –®–∞–≥ 2: –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
            builder = KnowledgeBaseBuilder()
            builder.ingest()
            logger.info("‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.")

            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º collection, —á—Ç–æ–±—ã –æ–Ω–∞ —É–≤–∏–¥–µ–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            collection = get_chroma_client().get_or_create_collection(CHROMA_COLLECTION_NAME)

        # –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –∏ –ø–æ–∏—Å–∫
        query_embedding = embedder.encode(segment)
        results = collection.query(query_embeddings=[query_embedding], n_results=top_k)
        chunks = results.get("documents", [[]])[0]

        logger.info(f"üîé –ù–∞–π–¥–µ–Ω–æ {len(chunks)} —á–∞–Ω–∫–æ–≤ –ø–æ —Å–µ–≥–º–µ–Ω—Ç—É '{segment}' (—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫).")
        return chunks

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–º –ø–æ–∏—Å–∫–µ: {e}")
        return []
